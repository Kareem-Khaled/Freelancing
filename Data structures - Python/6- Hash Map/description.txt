put:
Inserting new item to the hash map but before inserting it
we should check the load factor first  if it's >= (1.0 in the "sc version" or "0.5 in the oa version") we should double the capacity of the hash map

empty_buckets:
Returns the number of empty buckets in the hash map

table_load: 
Calculating the load factor of the hash map by dividing the size over the capacity

clear:
Remove all the items in the hash map

resize_table:
Resize the hash map to a specific capacity but we should make sure that a new capacity is a prime number

get:
Returns the value of the key if it exists, or None otherwise

contains_key:
Returns True if the key exists, Fales otherwise

remove:
Erase the key with its value if exist, nothing otherwise

get_keys_and_values:
Returns a DynamicArray containing all keys and values in the hash map

find_mode:
input: a DynamicArray
output: the items with the maximum frequency at the DynamicArray we are using the hash map to count the occurrence of each item

_rehash:
Helper function to help us rehashing the hash map
